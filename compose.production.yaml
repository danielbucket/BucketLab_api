# Production Docker Compose Configuration for Ubuntu Server
# Uses custom Dockerfiles to avoid volume mounting issues

services:
  # Cloudflare Tunnel Service
  cloudflared:
    env_file: ".env"
    container_name: cloudflared
    hostname: bucketlab-API-tunnel_prod
    image: cloudflare/cloudflared:latest
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run
    network_mode: host  # Required for tunnel to access host services
    volumes:
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      app_server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M

  # App Server (API Gateway)
  app_server:
    container_name: app_server
    build:
      context: .
      dockerfile: Dockerfile.app
    environment:
      - "MONGO_URI=mongodb://${MONGO_DB_USERNAME}:${MONGO_DB_PASSWORD}@mongoDB:27017/?authSource=admin"
      - NODE_ENV=${APP_RUN_MODE:-prod}
      - PORT=4020
    ports:
      - "4020:4020"
    depends_on:
      mongoDB:
        condition: service_healthy
    networks:
      - bucketLab_internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4020/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M

  # Auth Server (Internal Service)
  auth_server:
    container_name: auth_server
    build:
      context: .
      dockerfile: Dockerfile.auth
    environment:
      - "MONGO_URI=mongodb://${MONGO_DB_USERNAME}:${MONGO_DB_PASSWORD}@mongoDB:27017/?authSource=admin"
      - NODE_ENV=${APP_RUN_MODE:-prod}
      - PORT=4021
    expose:
      - "4021"
    depends_on:
      mongoDB:
        condition: service_healthy
    networks:
      - bucketLab_internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M

  # Laboratory Server (Internal Service)
  laboratory_server:
    container_name: laboratory_server
    build:
      context: .
      dockerfile: Dockerfile.laboratory
    environment:
      - "MONGO_URI=mongodb://${MONGO_DB_USERNAME}:${MONGO_DB_PASSWORD}@mongoDB:27017/?authSource=admin"
      - NODE_ENV=${APP_RUN_MODE:-prod}
      - PORT=4420
    expose:
      - "4420"
    depends_on:
      mongoDB:
        condition: service_healthy
    networks:
      - bucketLab_internal
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M

  # MongoDB Database
  mongoDB:
    container_name: bucketlab_empire_database
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_DB_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_DB_PASSWORD}"
      MONGO_INITDB_DATABASE: "bucketlab"
    expose:
      - "27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - bucketLab_internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M

volumes:
  mongodb_data:
    driver: local

networks:
  bucketLab_internal:
    driver: bridge
    name: bucketLab_internal
